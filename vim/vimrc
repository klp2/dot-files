" Load plugins using Pathogen. Don't worry if this bit doesn't make sense.

runtime bundle/vim-pathogen/autoload/pathogen.vim
" Bundle: https://github.com/tpope/vim-pathogen
call pathogen#infect()

" Bundle: https://github.com/airblade/vim-gitgutter.git
" Bundle: https://github.com/altercation/vim-colors-solarized.git
" Bundle: https://github.com/bkad/CamelCaseMotion.git
" Bundle: https://github.com/bling/vim-airline.git
" Bundle: https://github.com/ntpeters/vim-better-whitespace.git
" Bundle: https://github.com/c9s/perlomni.vim.git
" Bundle: https://github.com/fatih/vim-go.git
" Bundle: https://github.com/henrik/vim-indexed-search.git
" Bundle: https://github.com/jreybert/vimagit.git
" Bundle: https://github.com/Lokaltog/vim-powerline.git
" Bundle: https://github.com/qstrahl/vim-matchmaker.git
" Bundle: https://github.com/scrooloose/nerdcommenter.git
" Bundle: https://github.com/scrooloose/nerdtree.git
" Bundle: https://github.com/sheerun/vim-polyglot.git
" Bundle: https://github.com/tpope/vim-commentary.git
" Bundle: https://github.com/tpope/vim-fugitive.git
" Bundle: https://github.com/tpope/vim-surround.git
" Bundle: https://github.com/vim-scripts/vim-json-bundle.git
" Bundle: https://github.com/w0rp/ale.git
" Bundle: https://github.com/wincent/Command-T.git
" Bundle: https://github.com/yko/mojo.vim.git
" Bundle: https://github.com/flazz/vim-colorschemes.git
" Bundle: https://github.com/rhysd/accelerated-jk.git
" Bundle: https://github.com/klp2/dc_automakedir.git
" Bundle: https://github.com/klp2/dc_trackperlvars.git
" Bundle: https://github.com/klp2/dc_eqalignssimple.git
" Bundle: https://github.com/klp2/dc_smartcom.git
" Bundle: https://github.com/klp2/dc_foldsearches.git
" Bundle: https://github.com/jceb/vim-hier
" Bundle: https://github.com/junegunn/fzf.vim
" Bundle: https://github.com/tpope/vim-rhubarb
" Bundle: https://github.com/mattn/webapi-vim
" Bundle: https://github.com/mattn/gist-vim
" Bundle: https://github.maxmind.com/maxmind/mm.vim

syntax enable
colorscheme peaksea
set cc=90
set background=dark

set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set laststatus=2
set bs=2

"====[ Work out what kind of file this is ]========

filetype plugin indent on

augroup FiletypeInference
    autocmd!
    autocmd BufNewFile,BufRead  *.t      setfiletype perl
    autocmd BufNewFile,BufRead  *.pod    setfiletype pod
    autocmd BufNewFile,BufRead  *        call s:infer_filetype()
augroup END

function! s:infer_filetype ()
    for line in getline(1,20)
        if line =~ '^\s*use\s*v\?5\.\S\+\s*;\s*$'
            setfiletype perl
            return
        elseif line =~ '^\s*use\s*v\?6\s*;\s*$'
            setfiletype perl6
            return
        endif
    endfor
endfunction

au BufReadPost *.pl   set keywordprg=perldoc\ -f

"=====[ Configure % key (via matchit plugin) ]==============================

" Match angle brackets...
set matchpairs+=<:>,«:»,｢:｣

"=====[ Adjust keyword characters to match Perlish identifiers ]===============

set iskeyword+=$
set iskeyword+=%
set iskeyword+=@-@
set iskeyword+=:
set iskeyword-=,

"=====[ Auto-setup for new files ]===========

augroup New_File_Setup
    autocmd!
    autocmd BufNewFile   *  -1r !vim_file_template <afile>
    autocmd BufNewFile   *  :silent call search('^[ \t]*[#"].*implementation[ \t]\+here')
    autocmd BufNewFile   *  :redraw
augroup END

" " =====[ Smart completion via <TAB> and <S-TAB> ]=============

" Add extra completions (mainly for Perl programming)...

runtime bundle/dc_smartcom/plugin/smartcom.vim

let ANYTHING = ""
let NOTHING  = ""
let EOL      = '\s*$'

                " Left     Right      Insert                             Reset cursor
                " =====    =====      ===============================    ============
call SmartcomAdd( '<<',    ANYTHING,  "\<BS>\<BS>«"                                    )
call SmartcomAdd( '>>',    ANYTHING,  "\<BS>\<BS>»"                                    )
call SmartcomAdd( '?',     ANYTHING,  '?',                               {'restore':1} )
call SmartcomAdd( '?',     '?',       "\<CR>\<ESC>O\<TAB>"                             )
call SmartcomAdd( '{{',    ANYTHING,  '}}',                              {'restore':1} )
call SmartcomAdd( '{{',    '}}',      NOTHING,                                         )
call SmartcomAdd( 'qr{',   ANYTHING,  '}xms',                            {'restore':1} )
call SmartcomAdd( 'qr{',   '}xms',    "\<CR>\<C-D>\<ESC>O\<C-D>\<TAB>"                 )
call SmartcomAdd( 'm{',    ANYTHING,  '}xms',                            {'restore':1} )
call SmartcomAdd( 'm{',    '}xms',    "\<CR>\<C-D>\<ESC>O\<C-D>\<TAB>",                )
call SmartcomAdd( 's{',    ANYTHING,  '}{}xms',                          {'restore':1} )
call SmartcomAdd( 's{',    '}{}xms',  "\<CR>\<C-D>\<ESC>O\<C-D>\<TAB>",                )
call SmartcomAdd( '\*\*',  ANYTHING,  '**',                              {'restore':1} )
call SmartcomAdd( '\*\*',  '\*\*',    NOTHING,                                         )

" Handle single : correctly...
call SmartcomAdd( '^:\|[^:]:',  EOL,  "\<TAB>" )

" In the middle of a keyword: delete the rest of the keyword before completing...
                " Left     Right                    Insert
                " =====    =====                    =======================
"call SmartcomAdd( '\k',    '\k\+\%(\k\|\n\)\@!',    "\<C-O>cw\<C-X>\<C-N>",           )
"call SmartcomAdd( '\k',    '\k\+\_$',               "\<C-O>cw\<C-X>\<C-N>",           )

"After an alignable, align...
function! AlignOnPat (pat)
    return "\<ESC>:call EQAS_Align('nmap',{'pattern':'" . a:pat . "'})\<CR>A"
endfunction
                " Left         Right        Insert
                " ==========   =====        =============================
call SmartcomAdd( '=',         ANYTHING,    "\<ESC>:call EQAS_Align('nmap')\<CR>A")
call SmartcomAdd( '=>',        ANYTHING,    AlignOnPat('=>') )
call SmartcomAdd( '\s#',       ANYTHING,    AlignOnPat('\%(\S\s*\)\@<= #') )
call SmartcomAdd( '[''"]\s*:', ANYTHING,    AlignOnPat(':'),                   {'filetype':'vim'} )
call SmartcomAdd( ':',         ANYTHING,    "\<TAB>",                          {'filetype':'vim'} )


                " Left         Right   Insert                                  Where
                " ==========   =====   =============================           ===================
" Perl keywords...
call SmartcomAdd( '^\s*for',   EOL,    " my $___ (___) {\n___\n}\n___",        {'filetype':'perl'} )
call SmartcomAdd( '^\s*if',    EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )
call SmartcomAdd( '^\s*while', EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )
call SmartcomAdd( '^\s*given', EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )
call SmartcomAdd( '^\s*when',  EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )
call SmartcomAdd( '^\s*sub',   EOL,    " ___ (___) {\n___\n}\n___",            {'filetype':'perl'} )


" Convert between single- and double-quoted string endings...
call SmartcomAdd(      '''[^"]*"',  NOTHING,  "\<ESC>?'\<CR>:nohlsearch\<CR>r\"a",        {'restore':1+1} )
call SmartcomAdd( 'q\@<!q{[^"]*"',  NOTHING,  "\<BS>}\<ESC>?q{\<CR>:nohlsearch\<CR>sqq",  {'restore':1+2} )
call SmartcomAdd(     '"[^'']*''',  NOTHING,  "\<ESC>?\"\<CR>:nohlsearch\<CR>r'a",        {'restore':1+1} )
call SmartcomAdd(   'qq{[^'']*''',  NOTHING,  "\<BS>}\<ESC>?qq{\<CR>:nohlsearch\<CR>2sq", {'restore':1+1} )
"
"=====[ Correct common mistypings in-the-fly ]=======================

iab    retrun  return
iab     pritn  print
iab      Pelr  Perl
iab      pelr  perl

"=====[ Search folding ]=====================

" Don't start new buffers folded
set foldlevelstart=99

" Highlight folds
highlight Folded  ctermfg=cyan ctermbg=black

" Toggle on and off...
nmap <silent> <expr>  zz  FS_ToggleFoldAroundSearch({'context':1})

" Show only sub defns (and maybe comments)...
let perl_sub_pat = '^\s*\%(sub\|func\|method\|package\)\s\+\k\+'
let vim_sub_pat  = '^\s*fu\%[nction!]\s\+\k\+'
augroup FoldSub
    autocmd!
    autocmd BufEnter * nmap <silent> <expr>  zp  FS_FoldAroundTarget(perl_sub_pat,{'context':1})
    autocmd BufEnter * nmap <silent> <expr>  za  FS_FoldAroundTarget(perl_sub_pat.'\zs\\|^\s*#.*',{'context':0, 'folds':'invisible'})
    autocmd BufEnter *.vim,.vimrc nmap <silent> <expr>  zp  FS_FoldAroundTarget(vim_sub_pat,{'context':1})
    autocmd BufEnter *.vim,.vimrc nmap <silent> <expr>  za  FS_FoldAroundTarget(vim_sub_pat.'\\|^\s*".*',{'context':0, 'folds':'invisible'})
    autocmd BufEnter * nmap <silent> <expr>             zv  FS_FoldAroundTarget(vim_sub_pat.'\\|^\s*".*',{'context':0, 'folds':'invisible'})
augroup END

" Show only 'use' statements
nmap <silent> <expr>  zu  FS_FoldAroundTarget('^\s*use\s\+\S.*;',{'context':1})



"=====[ Smarter interstitial completions of identifiers ]=============
"
" When autocompleting within an identifier, prevent duplications...

augroup Undouble_Completions
    autocmd!
    autocmd CompleteDone *  call Undouble_Completions()
augroup END

function! Undouble_Completions ()
    let col  = getpos('.')[2]
    let line = getline('.')
    call setline('.', substitute(line, '\(\.\?\k\+\)\%'.col.'c\zs\1', '', ''))
endfunction
"=====[ ,, as => without delays ]===================

inoremap <expr><silent>  ,  Smartcomma()

function! Smartcomma ()
    let [bufnum, lnum, col, off, curswant] = getcurpos()
    if getline('.') =~ (',\%' . (col+off) . 'c')
        return "\<C-H>=>"
    else
        return ','
    endif
endfunction

"=====[ Configure Hier for error highlighting ]===================
" You also need to install the following:  https://github.com/jceb/vim-hier

highlight HierError    ctermfg=red     cterm=bold
highlight HierWarning  ctermfg=magenta cterm=bold

let g:hier_highlight_group_qf  = 'HierError'
let g:hier_highlight_group_qfw = 'HierWarning'

let g:hier_highlight_group_loc  = 'Normal'
let g:hier_highlight_group_locw = 'HierWarning'
let g:hier_highlight_group_loci = 'Normal'

"=====[ Configure ALE for error tracking ]==================
" You also need to install the following:  https://github.com/w0rp/ale

highlight AleError    ctermfg=red     cterm=bold
highlight AleWarning  ctermfg=magenta cterm=bold

augroup ALE_Autoconfig
    au!
    autocmd User GVI_Start  silent call Stop_ALE()
    autocmd User PV_Start   silent call Stop_ALE()
    autocmd User PV_End     silent call Start_ALE()
    autocmd User ALELint    silent HierUpdate
augroup END

let g:ale_set_loclist                = 0
let g:ale_set_quickfix               = 1
let g:ale_set_signs                  = 0
let g:ale_perl_perlcritic_executable = '/usr/local/bin/perlcritic'
let g:ale_linters                    = { 'perl': 'all' }

nmap <silent> ;m [Toggle automake on Perl files] :call Toggle_ALE()<CR>

function! Start_ALE ()
    ALEEnable
    HierStart
endfunction

function! Stop_ALE ()
    silent call s:ChangeProfile(&filetype)
    ALEDisable
    HierStop
    call setqflist([])
    redraw!
endfunction

function! Toggle_ALE ()
    if g:ale_enabled
        call Stop_ALE()
    else
        call Start_ALE()
    endif
    echo 'Error highlighting ' . (g:ale_enabled ? 'on' : 'off')
endfunction

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Indent using tabs (while in visual mode)
vnoremap < <gv
vnoremap > >gv
" make tab in v mode ident code
vmap <tab> >gv
vmap <s-tab> <gv
" make tab in normal mode ident code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

" case insensitive search
set ignorecase smartcase

" highlight all matches
set hlsearch

" lookahead as search pattern is specified
set incsearch

" indents
set smartindent
set autoindent

" reload files which have changed
:au CursorHold * checktime
set autoread

" show matching brackets
autocmd FileType perl set showmatch

" show line numbers
autocmd FileType perl set number

let mapleader = ","

"command -range=% -nargs=* Tidy <line1>,<line2>!
"  \perltidy -pbp <args>

nnoremap <silent> = :%!perltidy -q<Enter>
vnoremap <silent> = :!perltidy -q<Enter>

"remove all trailing whitespace
:nnoremap <silent> - :FixWhitespace<CR>
:vnoremap <silent> - :FixWhitespace<CR>

"dictionary sort
:vnoremap <silent> so :!sort -d<CR>

"dictionary sort unique
:vnoremap <silent> su :!sort -d <bar> uniq<CR>

"pretty print json
map <leader>jt <Esc>:%!json_xs -f json -t json-pretty<CR>

:set list!
:set listchars=tab:\|-

autocmd FileType go :set nolist

" enables shift-tab for outdent
exe 'set t_kB=' . nr2char(27) . '[Z'

" reflow text
nnoremap Q gqap
vnoremap Q gq

" highlight comments
highlight Comment term=bold ctermfg=white

"====[ Goto last location in non-empty files ]=======

autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
                   \|     exe "normal! g`\""
                   \|  endif

set stl=%f\ %m\ %r%{fugitive#statusline()}\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]

" paste the same line multiple times without the content of the "yank" being replaced
" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
xnoremap p pgvy

" https://github.com/jonswar/perl-code-tidyall/blob/master/etc/editors/tidyall.vim

" Run tidyall on the current buffer. If an error occurs, show it and leave it
" in tidyall.ERR, and undo any changes.

command! T :call TidyAll()

command! TidyAll :call TidyAll()
function! TidyAll()
    let cur_pos = getpos( '.' )
    let cmdline = ':1,$!tidyall --mode editor --pipe %:p 2> tidyall.ERR'
    execute( cmdline )
    if v:shell_error
        echo "\nContents of tidyall.ERR:\n\n" . system( 'cat tidyall.ERR' )
        silent undo
    else
        call system( 'rm tidyall.ERR' )
    endif
    call setpos( '.', cur_pos )
endfunction

" Bind to ,t (or leader+t)
map <leader>t :TidyAll<cr>

" Command-T remap
map <leader>f :CommandT<cr>

let g:auto_save = 1  " enable AutoSave on Vim startup

let g:gitgutter_realtime = 0

let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option

let g:matchmaker_enable_startup = 1

" http://stackoverflow.com/questions/1327978/sorting-words-not-lines-in-vim
:vnoremap <F1> d:execute 'normal a' . join(sort(split(getreg('"'))), ' ')<CR>

map <F2> :NERDTreeToggle<CR>

set statusline+=%#warningmsg#
set statusline+=%*

map ,mmi o__PACKAGE__->meta->make_immutable;<ESC>
map ,ddp ouse DDP;<CR>p( );<ESC>
map ,perl :set paste<CR>O#!/usr/bin/env perl;<CR><CR>use strict;<CR>use warnings;<CR>use feature qw( say );<CR><ESC>
map ,moose Opackage Foo::Bar;<CR><CR>use Moose;<CR><CR>use MooseX::StrictConstructor;<CR><CR>__PACKAGE__->meta->make_immutable;<CR>1;<ESC>
map ,ss :set paste<CR>i    my $self = shift;<CR>

" convert a file path to a Perl module name
" ie Foo/Bar/Baz.pm => Foo::Bar::Baz
map ,2mod :s/\.pm//<CR>gv:s/\//::/g<CR>

map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" tabs
set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
" use spaces rather than tabs
set expandtab

" 4 space tabs in html get annoying
au BufRead,BufNewFile *.tmpl set filetype=html
autocmd FileType html :setlocal sw=2 ts=2 sts=2

au BufRead,BufNewFile *.yml set filetype=yaml
autocmd FileType yaml :setlocal sw=2 ts=2 sts=2

" Treat Mojo templates (mostly) like HTML
autocmd FileType html.epl setlocal sw=2 ts=2 sts=2

" Don't override iTerm2's window transparency
hi Normal ctermbg=none

" Accelerated up and down on wrapped lines
"nnoremap  j  gj
"nnoremap  k  gk
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

" FZF
set rtp+=/usr/local/opt/fzf
set rtp+=~/.fzf
nmap ; :Buffers<CR>
nmap <Leader>r :Tags<CR>
nmap <Leader>t :Files<CR>
nmap <Leadera :Ag<CR>

source ~/.local_vimrc
